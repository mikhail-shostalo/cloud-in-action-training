trigger:
- master

pr: none

pool:
  vmImage: ubuntu-latest

stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureMysqlDeployment@1
      displayName: 'Execute Azure MySQL : InlineSqlTask'
      inputs:
        ConnectedServiceName: $(azureSubscriptionEndpoint)
        ServerName: $(ServerName)
        DatabaseName: $(DataBaseName)
        SqlUsername: $(SqlUserName)
        SqlPassword: $(SqlPassword)
        TaskNameSelector: InlineSqlTask
        SqlInline: CREATE DATABASE IF NOT EXISTS testDb;
    - bash: |
      export SPRING_DATASOURCE_URL=$(connectionDataBaseString)
      export SPRING_DATASOURCE_USERNAME=$(SqlUserName)
      export SPRING_DATASOURCE_PASSWORD=$(SqlPassword)
    - task: Gradle@2
      inputs:
        cwd: 'cloud-server'
        gradleWrapperFile: 'cloud-server/gradlew'
        gradleOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.11'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        tasks: 'build test'

    - task: DockerCompose@0
      displayName: Build services
      inputs:
        action: Build services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: docker-compose.yml
        additionalImageTags: $(Build.SourceVersion)
        dockerComposeFileArgs: |
          SPRING_DATASOURCE_URL=$(connectionDataBaseString)
          SPRING_DATASOURCE_USERNAME=$(SqlUserName)
          SPRING_DATASOURCE_PASSWORD=$(SqlPassword)

    - task: DockerCompose@0
      displayName: Push services
      inputs:
        action: Push services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(azureContainerRegistry)
        dockerComposeFile: docker-compose.yml
        additionalImageTags: $(Build.SourceVersion)

- stage: Deploy
  jobs:
  - job: Deploy
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: AzureWebAppContainer@1
      displayName: Azure Web App on Container Deploy
      inputs:
        appName: $(WebAppName)
        azureSubscription: $(azureSubscriptionEndpoint)
        imageName: $(azureContainerRegistry)/$(DockerRepository):$(Build.SourceVersion)